#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import numpy as np
import pandas as pd

from chgnet.model.model import CHGNet
from pymatgen.core import Structure


def get_energy(structure_file, file_format='POSCAR'):
    """
            Get the total energy of the crystal structure using pre-trained model.

    @type structure_file: str
    @type file_format: str
    :param structure_file: Structure file generated by genetic algorithm
    :param file_format: Format of the structure file
    :return: Total energy of the crystal structure
    @rtype: float
    """
    chgnet = CHGNet.load()
    if file_format == 'POSCAR':
        structure = Structure.from_file(os.path.join(os.path.abspath('../..'), 'File\\' + structure_file))
        prediction = chgnet.predict_structure(structure)
        for key, unit in [
            ("energy", "eV/atom"),
            # ("forces", "eV/A"),
            # ("stress", "GPa"),
            # ("magmom", "mu_B")
        ]:
            energy = prediction[key[0]]
    else:
        raise ValueError("Unrecognized file format")

    return round(energy, 6)


def get_formationenergy(raw_file):
    """
            Calculate the formation energy of Ge-Sb-Te compound from their total energy.

    @type raw_file: str
    :param raw_file: It should contain four columns, and the title should be like
                    | Ge | Sb | Te | Total_energy|
    :return: formation energy value
    @rtype: DataFrame
    """
    ge_energy_per_atom = -4.51807214
    sb_energy_per_atom = -4.141692635
    te_energy_per_atom = -3.141756903

    file = pd.read_csv(raw_file)
    df_formation = pd.DataFrame(file)

    composition = df_formation.iloc[:, :3]

    df_formation['formation_energy_per_atom'] = ((df_formation['energy_per_atom'] *
                                                  (df_formation['Ge'] + df_formation['Sb'] + df_formation['Te']) -
                                                  (df_formation['Ge'] * ge_energy_per_atom +
                                                   df_formation['Sb'] * sb_energy_per_atom +
                                                   df_formation['Te'] * te_energy_per_atom))
                                                 / composition.sum(axis=1))

    return df_formation


def get_fitness_score(df_formation, alpha=5):
    """
            The fitness function is generated by exponential transformation of the formation energy.

    @type df_formation: DataFrame
    @type alpha: float | int
    :param df_formation: Dataframe containing four columns,
                         which are numbers of Ge, Sb, Te atoms and total energy, respectively.
    :param alpha: Coefficient of fitness function representing the preference of selection
    @rtype: DataFrame
    """
    df_fitness = pd.DataFrame(df_formation)
    df_fitness['fitness'] = df_fitness['formation_energy_per_atom'].apply(lambda x: np.exp(- alpha * x))

    return df_fitness


if __name__ == '__main__':
    file_name = r'..\..\file\example_input.csv'

    form = get_formationenergy(file_name)

    fitness = get_fitness_score(form)

    df_output = pd.DataFrame(fitness)

    df_output.to_csv(r'..\..\file\output.csv', index=True, index_label="id")
