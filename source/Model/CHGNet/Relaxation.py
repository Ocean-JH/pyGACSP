#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os

import pandas as pd

from pymatgen.core import Structure
from chgnet.model import StructOptimizer

from Fitness.FitnessEvaluation import get_fitness_score


def relax(fmax, steps, species, struc_dir, gen_num):
    """
            Relax the generated structure using CHGNet.
    @type species: list of string
    @type fmax: float
    @type steps: int
    @type struc_dir: str
    @type gen_num: int
    :param fmax: The maximum force tolerance for relaxation
    :param steps: The maximum number of steps for relaxation
    :param species: Species of the system
    :param struc_dir: Structure file generated by pyXtal
    :param gen_num: Number of generations which requires relaxation
    :return: Structure after relaxation
    """

    pop = struc_dir.split('/')[-1]
    files = os.listdir(struc_dir)

    column_title = ['ID', 'nelements', 'crystal_system', 'space_group_number', 'from', 'composition', species[0],
                    species[1], species[2], 'energy_per_atom', 'formation_energy_per_atom', 'convergence', 'fitness']
    pop_data = pd.DataFrame(columns=column_title)

    pop_info_dir = r'..\..\file\Population_info'
    output_dir = os.path.join(r'..\..\file\Structures', pop + '_relaxed')
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    relaxer = StructOptimizer()
    for file in files:
        individual_id = file.split('_')[0]
        print('Start relaxation of ID: {}'.format(individual_id))
        structure = Structure.from_file(os.path.join(struc_dir, file))

        result = relaxer.relax(structure, fmax, steps, verbose=False)

        relaxed_structure = result["final_structure"]
        relaxed_structure.to_file(os.path.join(output_dir, file), fmt='poscar')

        pop_info = pd.read_csv(os.path.join(r'..\..\file\Population_info', '{}_pop-info.csv'.format(gen_num)))
        individual_data = pop_info.query("ID == '{}'".format(individual_id))

        relaxed_energy = result['trajectory'].energies[-1]
        relaxed_force = result['trajectory'].forces[-1]
        max_force = relaxed_force.max()
        if max_force < fmax:
            is_converged = True
        else:
            is_converged = False

        energy_per_atom = relaxed_energy / len(structure.sites)

        ge_energy_per_atom = -4.51807214
        sb_energy_per_atom = -4.141692635
        te_energy_per_atom = -3.141756903

        formation_energy_per_atom = ((relaxed_energy -
                                      (individual_data[species[0]] * ge_energy_per_atom +
                                       individual_data[species[1]] * sb_energy_per_atom +
                                       individual_data[species[2]] * te_energy_per_atom))
                                     / len(structure.sites))

        relaxed_data = {'ID': individual_id,
                        'nelements': individual_data['nelements'],
                        'crystal_system': individual_data['crystal_system'],
                        'space_group_number': individual_data['space_group_number'],
                        'from': individual_data['from'],
                        'composition': individual_data['composition'],
                        species[0]: individual_data[species[0]],
                        species[1]: individual_data[species[1]],
                        species[2]: individual_data[species[2]],
                        'energy_per_atom': energy_per_atom,
                        'formation_energy_per_atom': formation_energy_per_atom,
                        'convergence': is_converged}
        individual_data = pd.DataFrame(relaxed_data)

        individual_data = get_fitness_score(individual_data)

        if pop_data.empty:
            pop_data = individual_data
        else:
            pop_data = pd.concat([pop_data, individual_data])

    pop_data = pop_data.sort_values(by=['fitness'], ascending=False, ignore_index=True)
    pop_data.to_csv(os.path.join(pop_info_dir, '{}_relaxed_pop-info.csv'.format(gen_num)), index=False)


if __name__ == '__main__':
    relax(0.05, 1000, ['Ge', 'Sb', 'Te'], r'..\..\file\Structures\0_population', 0)

    # file = r'..\..\file\Structures\0_population\0-18_from_random-POSCAR'
    # structure = Structure.from_file(file)
